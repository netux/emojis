import argparse
import os

from datetime import datetime

import requests

GEMOJI_RELEASE_URL = 'https://api.github.com/repos/github/gemoji/releases'
GEMOJI_COMMITS_URL = 'https://api.github.com/repos/github/gemoji/commits'
GEMOJI_JSON_DB_URL = 'https://raw.githubusercontent.com/github/gemoji/{tag}/db/emoji.json'


def get_latest_release():
    req = requests.get(GEMOJI_RELEASE_URL)
    req.raise_for_status()

    data = req.json()

    latest = data[0]

    return latest['tag_name'], latest['name']

def get_latest_commit():
    req = requests.get(GEMOJI_COMMITS_URL)
    req.raise_for_status()

    data = req.json()

    latest = data[0]

    return latest['sha'], latest['commit']['message']


def generate(path, dbname, release):
    if release:
        tag, name = get_latest_release()
    else:
        tag, name = get_latest_commit()
        name = 'commit "' + name + '" (sha ' + tag + ') of gemoji'

    req = requests.get(GEMOJI_JSON_DB_URL.format(tag=tag))
    req.raise_for_status()

    data = req.json()

    path = os.path.join(path, dbname)

    with open(path, 'w', encoding='utf-8') as file:
        file.write('### This is a generated file.\n')
        file.write('### Do not edit this file.\n')
        file.write('### Date: {0}\n'.format(datetime.now().isoformat()[:-7]))
        file.write('### This file is based on {0}.\n'.format(name))
        file.write('\n')
        file.write('from collections import namedtuple\n')
        file.write('\n')
        file.write('Emoji = namedtuple("Emoji", ["aliases", "emoji", "tags", "category", "unicode_version"])\n')
        file.write('\n')
        file.write('EMOJI_DB = [\n')

        for emoji in data:
            if 'emoji' in emoji:
                file.write('    Emoji({aliases}, "{emoji}", {tags}, "{category}", "{unicode_version}"),\n'.format(**{
                    'aliases': emoji['aliases'],
                    'emoji': emoji['emoji'],
                    'tags': emoji['tags'],
                    'category': emoji['category'],
                    'unicode_version': emoji['unicode_version'],
                }))

        file.write(']\n')


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Generates the Emoji database.')
    parser.add_argument('--dir', default='.', help='Database location')
    parser.add_argument('--dbname', default='db.py', help='Database location')
    parser_release_group = parser.add_mutually_exclusive_group()
    parser_release_group.add_argument('--release', action='store_true', dest='use_release', help='Use latest release')
    parser_release_group.add_argument('--no-release', action='store_false', dest='use_release', help='Use latest release')
    args = parser.parse_args()

    print(args) # TODO(netux): remove debug log

    generate(args.dir, args.dbname, args.use_release)
